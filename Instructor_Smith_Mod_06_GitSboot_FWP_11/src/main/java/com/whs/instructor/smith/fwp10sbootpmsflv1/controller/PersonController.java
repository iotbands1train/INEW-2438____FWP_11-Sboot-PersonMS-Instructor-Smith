package com.whs.instructor.smith.fwp10sbootpmsflv1.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.whs.instructor.smith.fwp10sbootpmsflv1.model.Person;
import com.whs.instructor.smith.fwp10sbootpmsflv1.model.RandomPerson;
import com.whs.instructor.smith.fwp10sbootpmsflv1.service.AdminServiceImpl;
import com.whs.instructor.smith.fwp10sbootpmsflv1.service.PersonServiceImpl;

@RequestMapping("/")
@Controller // This means that this class is a Controller
public class PersonController {
	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use an pS for each
	PersonServiceImpl pS;
	@Autowired
	AdminServiceImpl aS;
	private long start;

	@RequestMapping("/aboutUs")
	// about us section
	// put bio about yourself like a CV / Resume
	// explain your knowledge of software engineer
	// explain various technologies you have
	// learn in software engineer
	public String aboutPage(Model m) {
		return "about";
	}

	@RequestMapping("/")
	// This means that this method will be executed when user sends GET Requests to
	// "/"
	// In our case, "http://localhost:8080/"
	public String loginPage(Model m) {
		start = (System.currentTimeMillis());
		m.addAttribute("lastAdmin", aS.lastAdmin());
		return "login";
	}

	@RequestMapping("/clearBatch")
	public String clearBatch(Model model) {

		pS.clear();
		model.addAttribute("size", pS.count());
		savePerson(new Person(null), model);
		model.addAttribute("listPersons", pS.getAllPersons());
		return viewPage(model, 1, "id", "asc");
	}

	@RequestMapping("/batch")
	public String addBatch(Model model) {
		model.addAttribute("num", new Integer(500));
		return "batch";
	}

	@RequestMapping("/addBatch")
	public String addBatch(Model model, @ModelAttribute("num") Integer num) {
		num = num == null || num < 500 ? 500 : num;
		model.addAttribute("listPersons", pS.addBatch(num));
		model.addAttribute("size", pS.count());
		return viewPage(model, 1, "id", "asc");
	}

	@RequestMapping("/home")
	public String homePage(@ModelAttribute("user") String u, @ModelAttribute("pass") String p, Model model) {
		if (aS.verifyAdmin(u, p)) {
			model.addAttribute("size", pS.count());
			model.addAttribute("listPersons", pS.getAllPersons());
			viewPage(model, 1, "id", "asc");
			return "view";
		} else
			return "redirect:/";
	}

	// display list of persons
	@GetMapping("/read")
	// This means that this method will be executed when user sends GET Requests to
	// "/"
	// In our case, "http://localhost:8080/"
	public String viewHomePage(Model model) {
		// We can use this attribute "listPersons" to perform server-side rendering of
		// the HTML with using Thymeleaf.
		// We set all persons data as "listPersons"
		model.addAttribute("size", pS.count());
		model.addAttribute("listPersons", pS.getAllPersons());
		// shows the view.html template:
		return viewPage(model, 1, "id", "asc");
	}

	// showNewPersonForm
	@GetMapping("/create")
	// This means that this method will be executed when user sends GET Requests to
	// "/showNewPersonForm"
	// In our case, "http://localhost:8080/showNewPersonForm"
	public String showNewPersonForm(Model model) {
		Person person = RandomPerson.randomPerson();
		// We can use this attribute "person" to perform server-side rendering of the
		// HTML with using Thymeleaf.
		// We set person object as "person"
		model.addAttribute("person", person);
		// shows the new_person.html template:
		return "create";
	}

	// add an person
	@PostMapping("/save")
	// This means that this method will be executed when user sends POST Requests to
	// "/savePerson"
	// In our case, "http://localhost:8080/savePerson"
	public String savePerson(@ModelAttribute("person") Person person, Model model) {
		// @ModelAttribute binds the object called "person" of request body from the
		// POST request into the person parameter of the savePerson() method.
		pS.savePerson(person);
		model.addAttribute("size", pS.count());
		model.addAttribute("listPersons", pS.getAllPersons());
		// after save the person data to database, redirect to "/"
		return viewPage(model, 1, "id", "asc");
	}

	// show update form
	@GetMapping("/edit/{id}")
	// This means that this method will be executed when user sends GET Requests to
	// "/showFormForUpdate/{person's id}"
	// In our case, "http://localhost:8080/showFormForUpdate/{person's id}"
	public String showUpdateForm(@PathVariable Long id, Model model) {
		// @PathVariable binds the {id} which the path of GET request contains into the
		// id parameter of showUpdateForm() method.
		Person person = pS.getPersonById(id);
		// We can use this attribute "person" to perform server-side rendering of the
		// HTML with using Thymeleaf.
		// We set person data as "person"
		model.addAttribute("person", person);
		// shows the update_person.html template:
		return "edit";
	}

	// delete the person by id
	@GetMapping("/delete/{id}")
	// This means that this method will be executed when user sends GET Requests to
	// "/delete/{person's id}"
	// In our case, "http://localhost:8080/delete/{person's id}"
	public String deletePersonById(@PathVariable Long id, Model model) {
		pS.deletePersonById(id);
		model.addAttribute("size", pS.count());
		model.addAttribute("listPersons", pS.getAllPersons());
		// after delete the person data from database, redirect to "/"
		return viewPage(model, 1, "id", "asc");
	}

	// show update form
	@GetMapping("/search")
	public String searchForm(Model model) {
		List<Person> list = pS.getAllPersons();
		Person lastPerson = list.get(list.size() - 1);
		Long lastID = lastPerson.getId();
		model.addAttribute("lastID", lastID);
		return "search";
	}

	// show update form
	@PostMapping("/search")
	public String search(@RequestParam Long id, Model model) {
		Person person = pS.getPersonById(id);
		model.addAttribute("person", person);
		return "results";
	}

	@RequestMapping("/page/{pageNum}")
	public String viewPage(Model model, @PathVariable(name = "pageNum") int pageNum,
			@Param("sortField") String sortField, @Param("sortDir") String sortDir) {
		start = (System.currentTimeMillis());

		Page<Person> page = pS.listAll(pageNum, 20, sortField, sortDir);
		List<Person> listPersons = page.getContent();
		List<Person> db = pS.getAllPersons();
		model.addAttribute("currentPage", pageNum == 0 ? 1 : pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("totalItems", page.getTotalElements());
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("db", db);
		model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
		model.addAttribute("size", page.getTotalElements());
		model.addAttribute("listPersons", listPersons);
		model.addAttribute("time", (System.currentTimeMillis() - start) * 0.001);
		return "view";
	}
	@RequestMapping("/page/{pageNum}/{numberOfPeoplePage}")
	public String viewPage(Model model, @PathVariable(name = "pageNum") int pageNum,
			@Param("sortField") String sortField, @Param("sortDir") String sortDir,
			@Param("numOfpage") int numberOfPeoplePage) {
		start = (System.currentTimeMillis());

		Page<Person> page = pS.listAll(pageNum, numberOfPeoplePage, sortField, sortDir);
		List<Person> listPersons = page.getContent();
		List<Person> db = pS.getAllPersons();
		model.addAttribute("currentPage", pageNum == 0 ? 1 : pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("totalItems", page.getTotalElements());
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("db", db);
		model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
		model.addAttribute("size", page.getTotalElements());
		model.addAttribute("listPersons", listPersons);
		model.addAttribute("time", (System.currentTimeMillis() - start) * 0.001);
		return "view";
	}
}
