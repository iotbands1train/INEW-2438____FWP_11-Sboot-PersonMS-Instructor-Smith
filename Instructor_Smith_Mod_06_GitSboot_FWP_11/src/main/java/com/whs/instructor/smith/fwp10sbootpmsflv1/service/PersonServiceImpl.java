package com.whs.instructor.smith.fwp10sbootpmsflv1.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

import com.whs.instructor.smith.fwp10sbootpmsflv1.model.Person;
import com.whs.instructor.smith.fwp10sbootpmsflv1.model.RandomPerson;
import com.whs.instructor.smith.fwp10sbootpmsflv1.repository.PersonRepository;

@Service // This means that this class is a service
public class PersonServiceImpl implements PersonService {
	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use it to handle the data
	PersonRepository personRepository;
	

	// get all persons
	public List<Person> getAllPersons() {
		// find all persons data, then return it
		
		
		return personRepository.findAll();
	}

	// save an person
	public void savePerson(Person per) {
		// save person data to database
		personRepository.save(per);
	}

	// get person by id
	public Person getPersonById(Long id) {
		// find an person by id
		Person per = personRepository.getById(id);
		// if there is not an person who has the id, throw the error.
		if (per == null) {
			throw new RuntimeException("Person not found");
		}
		return per;
	}

	// delete person by id
	public void deletePersonById(Long id) {
		// find an person by id
		Person per = personRepository.getById(id);
		// if there is not an person who has the id, throw the error.
		if (per == null) {
			throw new RuntimeException("Person not found");
		}
		// delete an person who has the id from the database
		personRepository.deleteById(id);
	}

	public long count() {
		// TODO Auto-generated method stub
		return personRepository.count();
	}

	public Person clear() {
		Person per = new Person(null);
		personRepository.deleteAll();
		return per;
	}

	public List<Person> addBatch(int num) {
		List<Person> list = RandomPerson.randomPersonList(num);
		return personRepository.saveAllAndFlush(list);
	}

	@Override
	public Page<Person> listAll(int pageNo, int pageSize, String sortField, String sortDir) { 
		Pageable pageable = PageRequest.of(pageNo - 1, pageSize,
				sortDir.equals("asc") ? Sort.by(sortField).ascending() : Sort.by(sortField).descending());

		return this.personRepository.findAll(pageable);
	}

}
